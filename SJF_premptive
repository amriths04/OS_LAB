#include <stdio.h>
#include <limits.h>

void preemptiveSJF() {
    int n, time = 0, completed = 0, shortest;
    int arrivalTime[20], burstTime[20], remainingTime[20];
    int waitingTime[20] = {0}, turnaroundTime[20] = {0};
    float totalWT = 0, totalTAT = 0;

    printf("Enter number of processes: ");
    scanf("%d", &n);

    printf("Enter arrival and burst times:\n");
    for (int i = 0; i < n; i++) {
        printf("Process %d: ", i + 1);
        scanf("%d %d", &arrivalTime[i], &burstTime[i]);
        remainingTime[i] = burstTime[i];
    }

    remainingTime[19] = INT_MAX; // To find minimum burst time

    while (completed < n) {
        shortest = 19;
        for (int i = 0; i < n; i++) {
            if (arrivalTime[i] <= time && remainingTime[i] < remainingTime[shortest] && remainingTime[i] > 0) {
                shortest = i;
            }
        }

        remainingTime[shortest]--;
        time++;

        if (remainingTime[shortest] == 0) {
            completed++;
            turnaroundTime[shortest] = time - arrivalTime[shortest];
            waitingTime[shortest] = turnaroundTime[shortest] - burstTime[shortest];
            totalWT += waitingTime[shortest];
            totalTAT += turnaroundTime[shortest];
        }
    }

    printf("\nProcess\tArrival\tBurst\tWaiting\tTurnaround\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t%d\t%d\t%d\n", i + 1, arrivalTime[i], burstTime[i], waitingTime[i], turnaroundTime[i]);
    }
    printf("Average Waiting Time: %.2f\n", totalWT / n);
    printf("Average Turnaround Time: %.2f\n", totalTAT / n);
}

int main() {
    preemptiveSJF();
    return 0;
}
